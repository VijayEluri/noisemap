<!DOCTYPE html>	<html lang="en">	<head>		<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>		<title>Silent places at the Rolex Learning Center</title>		<link rel="stylesheet" type="text/css" href="style/map.css" />		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>		<script type="text/javascript" src="js/heatmap.js"></script>	</head><body>	<div id="container"><!-- domain dependent is only the jnlp file -->	<script type="text/javascript">	$(document).ready(function(){		var xx = h337.create({"element":document.getElementById("heatmapArea"), "radius":60, "visible":true});		var el = document.getElementById("data").value;		var obj = eval('('+el+')');		xx.store.setDataSet(obj); // calls the heatmap's store's setDataSet method in order to set static data	});	   	</script>	  	Mobile Click <a href="launch.jnlp">here</a> to measure the noise of your area (the file opens with <a href="help.php">Java Web Start</a>)  	<p></p>  	Or install <a href="x.apk">this</a> application in your mobile phone.<p></p>  	<div id="heatmapArea"></div>  	<?php		error_reporting(E_ALL); 	  	ini_set("display_errors", "1");	    include("ffdb.inc.php");	// Flat File DataBase: .met file holds the schema and .dat file holds the data	    class Area{	    	var $x = "";	    	var $y = "";	    	var $noiseavg = 0;	// avg	    	var $n = 0;			// number of measurements		    function setData($x, $y){		        $this->x = $x;		        $this->y = $y; 		        return $this;		    }		    function addMeasurement($noise){		    	$this->n = $this->n + 1;		        $this->noiseavg = $this->noiseavg + ($noise - $this->noiseavg)/$this->n;	  		        return $this;		    }	    }	    class Areas{	    	var $arrayOfAreas = array();	    	var $max = -200;	// necessary		    function add($x, $y, $noise){		    					$found = false;		    	foreach($this->arrayOfAreas as $area){		    		if($area->x==$x && $area->y==$y){		    			$area->addMeasurement($noise);		    			$found = true;		    		}		    					    	}	 						    			    	if(!$found){		    		$ar = new Area();					array_push($this->arrayOfAreas, $ar->setData($x,$y)->addMeasurement($noise));		    	}						    			        return $this;		    }		    function toString(){		    	$measurements = "";		    	foreach($this->arrayOfAreas as $area){					$decibel = $area->noiseavg + 40;	// adds reference value -40dB for silence to make values positive					if($this->max < $decibel)						$this->max = $decibel;				// the maximum between the averages					$x = $area->x;					$y = $area->y;					$measurements = $measurements."{x: $x, y: $y, count: $decibel},\n";		    	}		    	return $measurements;			}		    	    }		$db = new FFDB();		$aps = simplexml_load_file('aps.xml');		if($db->open("noisepoints")){			$bssid = "bssid";			$noise = "noise";			$timestamp = "timestamp";	// TODO: avg over the same area to reduce network IO			$textarea = "<textarea id=\"data\">{";			$measurements = "data: [\n";			$arrayofareas = new Areas();			foreach($db->getall(NULL) as $item)							if(empty($_POST) || ($item[$timestamp] > $_POST['min'] && $item[$timestamp] < $_POST['max']))					foreach($aps->entry as $entry)						if($entry->string==$item[$bssid])							foreach($entry->area as $routerarea){								list($areaid, $height, $width, $x, $y) = $routerarea->attributes();								$center_x = round($x + $width/2, 0);								$center_y = round($y + $height/2, 0);								echo $y." ".$height." ".$center_y."XXX";								$arrayofareas->add($center_x, $center_y, $item[$noise]);							}											$measurements = $measurements.$arrayofareas->toString();				echo $textarea."max: -10,".$measurements."]}</textarea>";	// -20dB is considered too loud		}	?>		<div id="note">	<br/>	For problems or suggestions, feel free to <a href="http://people.epfl.ch/nikolaos.maris">contact us</a> or browse the <a href="https://github.com/nickmeet/noisemap">source code</a>.	</div>	</div></body></html>